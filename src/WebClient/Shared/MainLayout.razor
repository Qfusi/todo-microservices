@inherits LayoutComponentBase
@inject IAuthService AuthService
@inject IDialogService DialogService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<CascadingValue Value="this">
    <MudLayout>
        <MudAppBar Elevation="0" Dense="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            @if (AuthService.IsLoggedIn())
            {
                <MudIconButton Icon="@Icons.Material.Rounded.Logout" Color="Color.Inherit"
                OnClick="AuthService.LogoutAsync" />
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Rounded.Login" Color="Color.Inherit" OnClick="PromtLoginDialog" />
            }
        </MudAppBar>
        <MudDrawer ClipMode="DrawerClipMode.Always" Variant="DrawerVariant.Mini" @bind-Open="_drawerOpen" Elevation="1">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</CascadingValue>

@code {
    private bool _drawerOpen = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await base.OnAfterRenderAsync(firstRender);
        AuthService.LoginStateChangeOccurred += StateHasChanged;
        await AuthService.VerifyIsAuthenticatedAsync();
    }

    public void PromtLoginDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<LoginDialog>("Login", options);
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}
